/*
 * mini-cp is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License  v3
 * as published by the Free Software Foundation.
 *
 * mini-cp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY.
 * See the GNU Lesser General Public License  for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with mini-cp. If not, see http://www.gnu.org/licenses/lgpl-3.0.en.html
 *
 * Copyright (c)  2018. by Laurent Michel, Pierre Schaus, Pascal Van Hentenryck
 */

package minicp.ANDOR;

import minicp.cp.Factory;
import minicp.engine.core.IntVar;
import minicp.engine.core.Solver;
import minicp.search.*;
import minicp.state.StateManager;
import minicp.util.Procedure;
import minicp.util.exception.InconsistencyException;
import minicp.util.exception.NotImplementedException;
import tinycsp.Variable;

import java.util.LinkedList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Predicate;
import java.util.function.Supplier;

/**
 * Depth First Search Branch and Bound implementation
 */
public class AND_DFSearch {

    private Solver cp;
    private StateManager sm;


    private List<DFSListener> dfsListeners = new LinkedList<DFSListener>();


    private int currNodeIdId;

    /**
     * Creates a Depth First Search object with a given branching
     * that defines the search tree dynamically.
     *
     */
    public AND_DFSearch(Solver cp) {
        this.cp = cp;
        this.sm = cp.getStateManager();
    }

    /**
     * Adds a listener that is called on each solution.
     *
     * @param listener the closure to be called whenever a solution is found
     */
    public void onSolution(Procedure listener) {
        dfsListeners.add(new DFSListener() {
            @Override
            public void solution(int pId, int id, int position) {
                listener.call();
            }
        });
    }


    public void addListener(DFSListener listener) {
        dfsListeners.add(listener);
    }

    /**
     * Adds a listener that is called whenever a failure occurs
     * and the search backtracks.
     * This happensthat when a {@link InconsistencyException} is thrown
     * when executing the closure generated by the branching.
     *
     * @param listener the closure to be called whenever a failure occurs and
     *                 the search need to backtrack
     */
    public void onFailure(Procedure listener) {
        dfsListeners.add(new DFSListener() {
            @Override
            public void fail(int pId, int id, int position) {
                listener.call();
            }
        });
    }


    private void notifySolution(int parentId, int nodeId, int position) {
        dfsListeners.forEach(l -> l.solution(parentId, nodeId, position));
    }

    private void notifyFailure(int parentId, int nodeId, int position) {
        dfsListeners.forEach(l -> l.fail(parentId, nodeId, position));
    }

    private void notifyBranch(int parentId, int nodeId, int position, int nChilds) {
        dfsListeners.forEach(l -> l.branch(parentId, nodeId, position, nChilds));
    }

    private SearchStatistics solve(Branch branch, SearchStatistics statistics, Predicate<SearchStatistics> limit) {
        currNodeIdId = 0;
        sm.withNewState(() -> {
            try {
                dfs(branch,statistics, limit , -1, -1,0);
                statistics.setCompleted();
            } catch (StopSearchException ignored) {
            } catch (StackOverflowError e) {
                throw new NotImplementedException("dfs with explicit stack needed to pass this test");
            }
        });
        return statistics;
    }

    public SearchStatistics solve(Branch branch,Predicate<SearchStatistics> limit) {
        SearchStatistics statistics = new SearchStatistics();
        return solve(branch,statistics, limit);
    }

    private Procedure[] Branching(Solver cp, IntVar[] Variable) {
        int idx = -1; // index of the first variable that is not fixed
        boolean axe = true;
        for (int k = 0; k < Variable.length; k++)
            if (Variable[k].size() > 1) {
                idx = k;
                break;
            }
        if (idx == -1)
            return new Procedure[0];
        else {
            IntVar qi = Variable[idx];
            int v = qi.min();
            Procedure left = () -> cp.post(Factory.equal(qi, v));
            Procedure right = () -> cp.post(Factory.notEqual(qi, v));
            return new Procedure[]{left, right};
        }
    }

    private void dfs(Branch branch, SearchStatistics statistics, Predicate<SearchStatistics> limit, int parentId, int position,int AND) {
        if (limit.test(statistics))
            throw new StopSearchException();
        final int nodeId = currNodeIdId++;

        if (Objects.equals(branch.getType(), "and")) {
            notifyBranch(parentId,nodeId, position, branch.branches.length);
            int pos = 0;
            for (Branch b : branch.branches) {
                final int p = pos;
                sm.withNewState(() -> {
                    try {
                        statistics.incrNodes();
                        dfs(b,statistics, limit, nodeId, p,AND + 1);
                    } catch (InconsistencyException e) {
                        currNodeIdId++;
                        statistics.incrFailures();
                        notifyFailure(parentId,nodeId, p);
                    }
                });
                pos += 1;
            }
            if (AND == 0 && false){
                statistics.incrSolutions();
                notifySolution(parentId,nodeId, position);
            }
        } else {
            B_OR or = (B_OR) branch;
            Procedure[] branches = Branching(this.cp, or.variables);
            notifyBranch(parentId,nodeId, position, or.variables.length);
            int pos = 0;
            if (branches.length == 0) {
                if (branch.getBranches() == null && AND == 0){
                    statistics.incrSolutions();
                    notifySolution(parentId,nodeId, position);
                } else {
                    final int p = pos;
                    dfs(branch.getBranches()[0], statistics, limit, nodeId, p,Math.max(AND-1,0));
                }
            } else {
                for (Procedure b : branches) {
                    final int p = pos;
                    sm.withNewState(() -> {
                        try {
                            statistics.incrNodes();
                            b.call();
                            dfs(branch,statistics, limit, nodeId, p,Math.max(AND-1,0));
                        } catch (InconsistencyException e) {
                            currNodeIdId++;
                            statistics.incrFailures();
                            notifyFailure(parentId,nodeId, p);
                        }
                    });
                    pos += 1;
                }
            }

        }
    }


    public static DFSearch makeDfs(Solver cp, Supplier<Procedure[]> branching) {
        return new DFSearch(cp.getStateManager(), branching);
    }

    public static Branch Get_branches(String S){
        return new AND_DFSearch.B_OR(null,null);
    }
    static abstract class Branch {
        private String type;
        private Branch[] branches;
        public Branch(String type, Branch[] branches) {
            this.type = type;
            this.branches = branches;
        }
        public String getType() {
            return type;
        }
        public Branch[] getBranches() {
            return branches;
        }
    }
    static class B_AND extends Branch {
        public B_AND(Branch[] branches){
            super("and", branches);
        }
    }
    static class B_OR extends Branch {
        private IntVar[] variables;

        public B_OR(Branch[] branches, IntVar[] variables){
            super("or", branches);
            this.variables = variables;
        }

        public IntVar[] getVariables() {
            return variables;
        }
    }
}
